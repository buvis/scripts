#!/usr/bin/env python

import os
import sys
import unicodedata
from pathlib import Path


def normalize_folder_names_recursive(folder_path: Path):
    """
    Recursively normalizes folder names in a directory tree.
    Merges contents of duplicate folders with conflicting UTF-8 encodings.
    Skips folders that start with '._' to avoid FileNotFoundError on NFS shares.
    """
    # Skip folders starting with '._'
    if folder_path.name.startswith("._"):
        print(f"Skipping special folder: {folder_path}")
        return

    # First, process subfolders
    for item in list(folder_path.iterdir()):
        if item.is_dir():
            normalize_folder_names_recursive(item)

    # Then, normalize the current folder's name
    normalized_name = unicodedata.normalize("NFC", folder_path.name)

    # Skip normalization if folder starts with '._' after normalization
    if normalized_name.startswith("._"):
        print(f"Skipping special folder after normalization: {folder_path}")
        return

    if normalized_name != folder_path.name:
        print(f"Normalizing: {folder_path} -> {normalized_name}")
        normalized_path = folder_path.with_name(normalized_name)

        # If the normalized path already exists, merge the contents
        if normalized_path.exists():
            if normalized_path.is_dir():
                print(f"  Merging duplicate folder: {normalized_name}")
                # Merge contents of the two folders
                merge_folders(folder_path, normalized_path)
                # After merging, attempt to remove the now-empty folder
                if folder_path.exists():
                    if not any(folder_path.iterdir()):
                        folder_path.rmdir()
                        print(f"Removed empty directory: {folder_path}")
                    else:
                        handle_non_empty_directory(folder_path, normalized_path)
            else:
                print(
                    f"  Cannot merge: {normalized_path} exists and is not a directory."
                )
        else:
            # Rename the folder to the normalized name
            try:
                folder_path.rename(normalized_path)
            except Exception as e:
                print(
                    f"  Error renaming folder {folder_path} to {normalized_path}: {e}"
                )
    else:
        # No normalization needed; may still need to handle special folders
        pass


def merge_folders(source: Path, destination: Path):
    """
    Recursively merge contents from source folder into destination folder.
    Skips files or directories starting with '._' to avoid FileNotFoundError on NFS shares.
    """
    for item in list(source.iterdir()):
        # Skip items starting with '._'
        if item.name.startswith("._"):
            print(f"  Skipping special file or folder: {item}")
            continue

        dest_item = destination / item.name
        if item.is_dir():
            if dest_item.exists():
                if dest_item.is_dir():
                    # Recursively merge subdirectories
                    merge_folders(item, dest_item)
                    # After merging, attempt to remove the now-empty folder
                    if item.exists():
                        if not any(item.iterdir()):
                            item.rmdir()
                            print(f"  Removed empty directory: {item}")
                        else:
                            handle_non_empty_directory(item, dest_item)
                else:
                    print(f"  Conflict: {dest_item} exists and is not a directory.")
            else:
                try:
                    item.rename(dest_item)
                except Exception as e:
                    print(f"  Error renaming folder {item} to {dest_item}: {e}")
        else:
            if dest_item.exists():
                print(f"  Conflict: File {dest_item} already exists. Skipping {item}.")
                # Optionally, handle file collisions here (e.g., rename or overwrite)
            else:
                try:
                    item.rename(dest_item)
                except Exception as e:
                    print(f"  Error renaming file {item} to {dest_item}: {e}")
    # After merging, check if source directory is empty
    if not any(source.iterdir()):
        source.rmdir()
        print(f"Removed empty directory: {source}")
    else:
        handle_non_empty_directory(source, destination)


def handle_non_empty_directory(source: Path, destination: Path):
    """
    Rename the non-empty source directory and move it into the destination.
    """
    base_name = "leftovers"
    new_name = base_name
    counter = 1
    remainder_dest = destination / new_name
    while remainder_dest.exists():
        # If the name already exists, append a counter
        new_name = f"{base_name}{counter}"
        remainder_dest = destination / new_name
        counter += 1
    try:
        source.rename(remainder_dest)
        print(f"Moved non-empty directory {source} to {remainder_dest}")
    except Exception as e:
        print(f"Failed to move non-empty directory {source} to {remainder_dest}: {e}")


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python scriptname.py <root_directory>")
        sys.exit(1)
    root_directory = sys.argv[1]
    root_path = Path(root_directory)
    if not root_path.is_dir():
        print(f"The specified path {root_directory} is not a directory.")
        sys.exit(1)
    normalize_folder_names_recursive(root_path)
    print("Normalization complete.")
