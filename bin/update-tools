#!/usr/bin/env bash

# Script to automate asdf tool upgrades, handling minor/patch and major version upgrades.
# Designed for asdf version 0.16+.
# Uses .tool-versions files instead of `asdf global`

# --- Configuration ---
TOOL_VERSIONS_FILE="$HOME/.tool-versions"
INTERACTIVE=false
FORCE=false # Force upgrade without asking
ASDF_BIN=$(which asdf)
LOG_FILE="/tmp/asdf_upgrade.log"  # Added log file

# --- Functions ---

# Function to display usage information
usage() {
  echo "Usage: $0 [options]"
  echo "Options:"
  echo "  --interactive   Run in interactive mode, prompting for major version upgrades."
  echo "  --force         Force upgrade without asking"
  echo "  --tool-versions <path> Path to the .tool-versions file (default: $HOME/.tool-versions)"
  echo "  --help          Display this help message."
  exit 1
}

# Parse command-line arguments
while [ "$#" -gt 0 ]; do
  case "$1" in
    --interactive)
      INTERACTIVE=true
      shift ;;
    --force)
      FORCE=true
      INTERACTIVE=false # force implies non-interactive
      shift ;;
    --tool-versions)
      TOOL_VERSIONS_FILE="$2"
      shift 2 ;;
    --help)
      usage
      exit 0 ;;
    *)
      echo "Unknown option: $1"
      usage
      exit 1 ;;
  esac
done

# Check if asdf is installed
if [ -z "$ASDF_BIN" ]; then
  echo "Error: asdf is not installed or not in your PATH."
  exit 1
fi

# Check if the .tool-versions file exists
if [ ! -f "$TOOL_VERSIONS_FILE" ]; then
  echo "Error: .tool-versions file not found at $TOOL_VERSIONS_FILE"
  exit 1
fi

# Function to update asdf plugin by removing and re-adding, preserving installed versions
update_plugin() {
  local tool_name="$1"
  echo "Updating plugin for $tool_name by removing and re-adding, preserving versions..."

  # Get list of installed versions
  local installed_versions
  installed_versions=$($ASDF_BIN list "$tool_name")

  # Remove the plugin
  $ASDF_BIN plugin remove "$tool_name" || echo "Plugin $tool_name was not installed, continuing"

  # Add the plugin back
  $ASDF_BIN plugin add "$tool_name"

  # Reinstall the versions
  if [[ -n "$installed_versions" ]]; then
    echo "Reinstalling versions: $installed_versions"
    while IFS= read -r version; do
      # Remove asterisk if present
      version="${version//[*]}"  # Remove all asterisks
      version="${version//[[:space:]]}" # Remove whitespace

      echo "Installing $tool_name $version"
      $ASDF_BIN install "$tool_name" "$version"
    done <<< "$installed_versions"
  fi
}

# Function to get the current version from .tool-versions
get_current_version() {
  local tool_name="$1"
  awk "\$1 == \"$tool_name\" {print \$2}" "$TOOL_VERSIONS_FILE"
}

# Function to get the latest stable version available for a tool, sticking to the same major version.
get_latest_minor_version() {
  local tool_name="$1"
  local current_version="$2"
  local major_version=$(echo "$current_version" | cut -d'.' -f1)

  # Get the latest stable version for the major version
  local latest_stable_version
  latest_stable_version=$($ASDF_BIN latest "$tool_name" "$major_version")

  # If the latest version is valid, return it
  if [[ -n "$latest_stable_version" && "$latest_stable_version" != "latest" ]]; then
    echo "$latest_stable_version"
  else
    echo ""
  fi
}

# Function to check for major version upgrades.
get_latest_major_version() {
  local tool_name="$1"
  local current_version=$(get_current_version "$tool_name")
  local current_major_version=$(echo "$current_version" | cut -d'.' -f1)

  # Get all available versions
  local available_versions
  available_versions=$($ASDF_BIN list all "$tool_name")

  local latest_major_version=""

  # Iterate through available versions and find the highest major version
  while IFS= read -r version; do
    local major_version=$(echo "$version" | cut -d'.' -f1)

    # Check if the version is greater than the current major version
    if (( $(echo "$major_version > $current_major_version" | bc) )); then
      if [[ -z "$latest_major_version" ]]; then
        latest_major_version="$version"
      else
        # Compare with existing latest_major_version
        if (( $(echo "$major_version > $(echo "$latest_major_version" | cut -d'.' -f1)" | bc) )); then
          latest_major_version="$version"
        fi
      fi
    fi
  done <<< "$available_versions"

  echo "$latest_major_version"
}

# Function to update the .tool-versions file
update_tool_versions() {
  local tool_name="$1"
  local new_version="$2"

  # Use sed to replace the line in .tool-versions
  # Using a backup extension for macOS compatibility
  sed -i '.bak' "s/^${tool_name} .*$/${tool_name} ${new_version}/" "$TOOL_VERSIONS_FILE"
  # Remove the backup file
  rm -f "$TOOL_VERSIONS_FILE.bak"
}

# Function to perform the upgrade
upgrade_tool() {
  local tool_name="$1"
  local current_version="$2"
  local latest_minor_version="$3"
  local latest_major_version="$4"

  if [[ -n "$latest_minor_version" && "$latest_minor_version" != "$current_version" ]]; then
    echo "Upgrading $tool_name from $current_version to $latest_minor_version..."
    $ASDF_BIN install --keep-download "$tool_name" "$latest_minor_version"
    echo "$tool_name upgraded to $latest_minor_version"

    # Update .tool-versions file
    update_tool_versions "$tool_name" "$latest_minor_version"
  else
    echo "$tool_name is already at the latest minor version ($current_version)."
  fi

  # Check for major version upgrades if interactive mode is enabled.
  if $INTERACTIVE; then
    if [[ -n "$latest_major_version" && "$latest_major_version" != "$latest_minor_version" ]]; then
      read -r -p "Major version upgrade available for $tool_name: $latest_major_version. Upgrade now? (y/n) " yn
      case $yn in
        [Yy]* )
          echo "Upgrading $tool_name to major version $latest_major_version..."
          $ASDF_BIN install --keep-download "$tool_name" "$latest_major_version"
          echo "$tool_name upgraded to $latest_major_version"

          # Update .tool-versions file
          update_tool_versions "$tool_name" "$latest_major_version"
          ;;
        [Nn]* )
          echo "Skipping major version upgrade for $tool_name."
          ;;
        * )
          echo "Invalid input. Skipping major version upgrade for $tool_name."
          ;;
      esac
    fi
  elif $FORCE; then
    if [[ -n "$latest_major_version" && "$latest_major_version" != "$latest_minor_version" ]]; then
      echo "Forcing major version upgrade for $tool_name to $latest_major_version..."
      $ASDF_BIN install --keep-download "$tool_name" "$latest_major_version"
      echo "$tool_name upgraded to $latest_major_version"

      # Update .tool-versions file
      update_tool_versions "$tool_name" "$latest_major_version"
    fi
  fi
}

# --- Main Script ---

# Loop through each tool in .tool-versions
while IFS=' ' read -r tool_name current_version; do
  # Skip comments and empty lines
  if [[ "$tool_name" == \#* || -z "$tool_name" ]]; then
    continue
  fi

  update_plugin "$tool_name"

  latest_minor_version=$(get_latest_minor_version "$tool_name" "$current_version")
  latest_major_version=$(get_latest_major_version "$tool_name")

  upgrade_tool "$tool_name" "$current_version" "$latest_minor_version" "$latest_major_version"

done < "$TOOL_VERSIONS_FILE"

echo "asdf tool upgrade script completed."

